{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class TokenInterceptorService {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    let tokenizeReq = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${this.authService.getToken()}`\n      }\n    });\n    return next.handle(tokenizeReq);\n  }\n}\nTokenInterceptorService.ɵfac = function TokenInterceptorService_Factory(t) {\n  return new (t || TokenInterceptorService)(i0.ɵɵinject(i1.AuthService));\n};\nTokenInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptorService,\n  factory: TokenInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,uBAAuB;EAClCC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAAS,CACPC,GAAwE,EACxEC,IAAoC;IAEpC,IAAIC,WAAW,GAAGF,GAAG,CAACG,KAAK,CAAC;MAC1BC,UAAU,EAAE;QACVC,aAAa,EAAE,UAAU,IAAI,CAACP,WAAW,CAACQ,QAAQ,EAAE;;KAEvD,CAAC;IACF,OAAOL,IAAI,CAACM,MAAM,CAACL,WAAW,CAAC;EACjC;;AAbWN,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;SAAvBA,uBAAuB;EAAAY,SAAvBZ,uBAAuB;EAAAa,YAFtB;AAAM","names":["TokenInterceptorService","constructor","authService","intercept","req","next","tokenizeReq","clone","setHeaders","Authorization","getToken","handle","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Lupi\\Desktop\\challengetechforb-main\\challengetechforb-main\\client\\src\\app\\services\\token-interceptor.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpInterceptor } from '@angular/common/http';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TokenInterceptorService implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(\n    req: { clone: (arg0: { setHeaders: { Authorization: string } }) => any },\n    next: { handle: (arg0: any) => any }\n  ) {\n    let tokenizeReq = req.clone({\n      setHeaders: {\n        Authorization: `Bearer ${this.authService.getToken()}`,\n      },\n    });\n    return next.handle(tokenizeReq);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}